What additional properties did you add to your models and why?

I decided to add in a completely new history model. I felt as though, that the capturing of each move made more sense to have a separate category that could fully
gather and store that information properly. I also decided to input the win / loss information into the game, if the game is going to remain historical, and it
wouldn't be repeating itself, that I could get away with simplifying it there. Also, since this is a multiplayer game, I decided that the Turn was very valuable,
as I needed to know whose turn it was. User_one & Two was used to switch back and forth on said turn in order to be able to fully facilitate the game. Finally,
I also decided to go with creating a leaderboard instead of trying to do the calculations everytime I needed on the fly. At some point, I believe the game would want
a stand alone page that was just showing the current leaders, and figured that it would reduce the energy required to get the information if the records were stored
in a format that it would be consumed at, a very simple win / loss.

What were some of the trade-offs or struggles you faced when implementing the new game logic?

I had some syntactical struggles with how the NDB models were working. I am much more use to have SQL to be able to solve issues, and it is very different going into a 
OOP to be able to solve the same problem. For example, I find it to be much easier to simply write select count(*) from XXX instead of XXX.query().fetch().count() or 
something else along those lines.

I also had some issues when it came to properly forming the request / responses in forms. As this is a completely new area for how to handle it, I ran into a few property
errors with expectations of Strings, Integers, or Booleans and trying to understand how to properly format it all.

From a true design I really struggled thinking about how the database / NDB models should be organized. I went back and forth quite a bit over the idea of having theS
Score table exist and not store the winner / loser information in the game. However, I found that it simplified my initial queries and thus decided to keep it that way.
However, I feel if I were to continue developing this app, I would want to simplify the set of Models that I have currently to be a little more coherent.

Truly the biggest issue that I spent a little more time on then I should have is implementing the dictionary function of this app. In order for this game to truly be good
one would have to verify that the user is actually picking real words, and this can be done with the pyenchant library. However, the big caveat is that module does not
work with the google appengine. This was very confusing for a very long time, until I realized that the issue was intentional because Google doesn't allow the C libraries
to be used, as I assume a security issue with too much control. Unfortunately, I did not implement that aspect of the game, however it is still a fully functional game 
otherwise.